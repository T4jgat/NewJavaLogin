import DB.DbFunctions;
import DB.User;
import Logining.Password;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;

public class setNewPassword extends JFrame {
    private JTextField newPassField;
    private JTextField repeatPassField;
    private JButton updatePaswordButton;
    private JLabel repeatPassLabel;
    private JLabel newPassLabel;
    private JPanel rootPanel;
    private JLabel PassMiss;

    private User updatePassUserIns;
    private Connection conn;

    setNewPassword(User user) {
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        DbFunctions db = new DbFunctions();
        conn = db.connect_to_db("Users", "postgres", "1423");
        updatePassUserIns = user;
        PassMiss.setVisible(false);

        updatePaswordButton.addActionListener(e -> {
            String newPassValue = newPassField.getText();
            String repPassValue = repeatPassField.getText();
            if (!Password.PasswordValidation(newPassValue)) {
                PassMiss.setText("Password is Weak!");
                PassMiss.setVisible(true);
            }
            if (!newPassValue.equals(repPassValue)) {
                PassMiss.setText("Password mismatch");
                PassMiss.setVisible(true);
            } else if (Password.PasswordValidation(newPassValue)) {
                db.update_password(conn, "Users", updatePassUserIns.getPassword(), updatePassUserIns.getEmail(), Password.doHashing(newPassValue));
                System.exit(0);
            }
        });
        setContentPane(rootPanel);
        setSize(280, 230);
        setVisible(true);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new GridLayoutManager(9, 5, new Insets(0, 0, 0, 0), -1, -1));
        newPassField = new JTextField();
        rootPanel.add(newPassField, new GridConstraints(1, 2, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        newPassLabel = new JLabel();
        newPassLabel.setText("New password");
        rootPanel.add(newPassLabel, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        repeatPassField = new JTextField();
        repeatPassField.setText("");
        rootPanel.add(repeatPassField, new GridConstraints(3, 2, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        repeatPassLabel = new JLabel();
        repeatPassLabel.setText("Repeat passsword");
        rootPanel.add(repeatPassLabel, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        updatePaswordButton = new JButton();
        updatePaswordButton.setText("Update pasword");
        rootPanel.add(updatePaswordButton, new GridConstraints(5, 2, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        rootPanel.add(spacer1, new GridConstraints(0, 2, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        rootPanel.add(spacer2, new GridConstraints(2, 2, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer3 = new Spacer();
        rootPanel.add(spacer3, new GridConstraints(0, 4, 8, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer4 = new Spacer();
        rootPanel.add(spacer4, new GridConstraints(4, 2, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer5 = new Spacer();
        rootPanel.add(spacer5, new GridConstraints(0, 0, 9, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        PassMiss = new JLabel();
        PassMiss.setForeground(new Color(-65536));
        PassMiss.setText("Password mismatch ");
        rootPanel.add(PassMiss, new GridConstraints(6, 2, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }

}


class demo {
    static DbFunctions d = new DbFunctions();
    static Connection conn = d.connect_to_db("Users", "postgres", "1423");
    static User user = new User(conn, "tmtmtm1423@gmail.com");

    public static void main(String[] args) {
        JFrame pa = new setNewPassword(user);
    }
}